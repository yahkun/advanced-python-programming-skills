#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Wed Mar  7 13:09:53 2018

@author: yahkun
"""

"""
实际案例:
    在设计某网络程序时,我们自定义了一个基于UDP的网络协议,按照固定次序向服务器传递一系列参数:
hwDetect:           "<0112>"
gxDepthBits:        "<32>"
gxResolution:       "<1024x768>"
gxRefresh:          "<60>"
fullAlpha:          "<1>"
lodDist:            "<100.0>"
DistCull:           "<500.0>"

在程序中我们将各个参数按次序收集到列表中:
["<0112>", "<32>", "<1024x768>", "<60>", "<1>", "<100.0>", "<500.0>"]
最终我们要把各个参数拼接成一个数据报发送.
["<0112><32><1024x768><60><1><100.0><500.0>"]
"""

"""
解决方案:
    方案一: 迭代列表, 连续使用'+'操作依次拼接每一个字符串.
    方案二【推荐】: 使用str.join()方法, 更加快速的拼接列表中所有字符串.
"""

# 方案一
s1 = 'abcdefg'
s2 = '12345'
print(s1 + s2)
#本质上, str.__add__(s1, s2) 内部重载

pl = ["<0112>", "<32>", "<1024x768>", "<60>", "<1>", "<100.0>", "<500.0>"]
s = ''
for p in pl:
    s += p
    print(s)
# 大量的字符串拷贝和临时释放, 会造成巨大的浪费
    
# 方案二
res = ''.join(pl)
print(res)

# 需要注意的地方:
# 若一个列表中具有不可迭代的对象元素, 需要做类型转换或者将改元素剔除
l = ['abc', 123, 45, 'xyz']
res_of_l = ''.join(str(x) for x in l) #使用生成器, 列表解析式浪费内存